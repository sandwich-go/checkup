// Code generated by protokitgo. DO NOT EDIT.
package common

import "go.uber.org/zap/zapcore"
import "strconv"

var _ = strconv.IntSize

var ZapLogMarshalNormalAck func(zapcore.ObjectEncoder, *NormalAck) error

type ZapArrayNormalAck []*NormalAck

func (x ZapArrayNormalAck) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntNormalAck map[int]*NormalAck

func (x ZapMapIntNormalAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32NormalAck map[int32]*NormalAck

func (x ZapMapInt32NormalAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64NormalAck map[int64]*NormalAck

func (x ZapMapInt64NormalAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringNormalAck map[string]*NormalAck

func (x ZapMapStringNormalAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32NormalAck map[uint32]*NormalAck

func (x ZapMapUint32NormalAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64NormalAck map[uint64]*NormalAck

func (x ZapMapUint64NormalAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *NormalAck) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalNormalAck != nil {
		return ZapLogMarshalNormalAck(e, x)
	}
	if x == nil {
		return
	}
	return
}

var ZapLogMarshalEmpty func(zapcore.ObjectEncoder, *Empty) error

type ZapArrayEmpty []*Empty

func (x ZapArrayEmpty) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntEmpty map[int]*Empty

func (x ZapMapIntEmpty) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32Empty map[int32]*Empty

func (x ZapMapInt32Empty) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64Empty map[int64]*Empty

func (x ZapMapInt64Empty) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringEmpty map[string]*Empty

func (x ZapMapStringEmpty) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32Empty map[uint32]*Empty

func (x ZapMapUint32Empty) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64Empty map[uint64]*Empty

func (x ZapMapUint64Empty) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *Empty) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalEmpty != nil {
		return ZapLogMarshalEmpty(e, x)
	}
	if x == nil {
		return
	}
	return
}

var ZapLogMarshalPing func(zapcore.ObjectEncoder, *Ping) error

type ZapArrayPing []*Ping

func (x ZapArrayPing) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntPing map[int]*Ping

func (x ZapMapIntPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32Ping map[int32]*Ping

func (x ZapMapInt32Ping) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64Ping map[int64]*Ping

func (x ZapMapInt64Ping) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringPing map[string]*Ping

func (x ZapMapStringPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32Ping map[uint32]*Ping

func (x ZapMapUint32Ping) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64Ping map[uint64]*Ping

func (x ZapMapUint64Ping) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *Ping) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalPing != nil {
		return ZapLogMarshalPing(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt64("Timestamp", x.Timestamp)
	return
}

var ZapLogMarshalPingAck func(zapcore.ObjectEncoder, *PingAck) error

type ZapArrayPingAck []*PingAck

func (x ZapArrayPingAck) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntPingAck map[int]*PingAck

func (x ZapMapIntPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32PingAck map[int32]*PingAck

func (x ZapMapInt32PingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64PingAck map[int64]*PingAck

func (x ZapMapInt64PingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringPingAck map[string]*PingAck

func (x ZapMapStringPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32PingAck map[uint32]*PingAck

func (x ZapMapUint32PingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64PingAck map[uint64]*PingAck

func (x ZapMapUint64PingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *PingAck) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalPingAck != nil {
		return ZapLogMarshalPingAck(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt64("Timestamp", x.Timestamp)
	return
}

var ZapLogMarshalErrorResponse func(zapcore.ObjectEncoder, *ErrorResponse) error

type ZapArrayErrorResponse []*ErrorResponse

func (x ZapArrayErrorResponse) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntErrorResponse map[int]*ErrorResponse

func (x ZapMapIntErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32ErrorResponse map[int32]*ErrorResponse

func (x ZapMapInt32ErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64ErrorResponse map[int64]*ErrorResponse

func (x ZapMapInt64ErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringErrorResponse map[string]*ErrorResponse

func (x ZapMapStringErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32ErrorResponse map[uint32]*ErrorResponse

func (x ZapMapUint32ErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64ErrorResponse map[uint64]*ErrorResponse

func (x ZapMapUint64ErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *ErrorResponse) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalErrorResponse != nil {
		return ZapLogMarshalErrorResponse(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt32("Code", x.Code)
	e.AddString("Message", x.Message)
	e.AddByteString("Data", x.Data)
	e.AddBool("LogicException", x.LogicException)
	return
}
