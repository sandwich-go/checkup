// Code generated by protokitgo. DO NOT EDIT.
package internal_command

import "go.uber.org/zap/zapcore"
import "strconv"

var _ = strconv.IntSize

var ZapLogMarshalCmdStream func(zapcore.ObjectEncoder, *CmdStream) error

type ZapArrayCmdStream []*CmdStream

func (x ZapArrayCmdStream) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntCmdStream map[int]*CmdStream

func (x ZapMapIntCmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32CmdStream map[int32]*CmdStream

func (x ZapMapInt32CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64CmdStream map[int64]*CmdStream

func (x ZapMapInt64CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringCmdStream map[string]*CmdStream

func (x ZapMapStringCmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32CmdStream map[uint32]*CmdStream

func (x ZapMapUint32CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64CmdStream map[uint64]*CmdStream

func (x ZapMapUint64CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalCmdStream != nil {
		return ZapLogMarshalCmdStream(e, x)
	}
	if x == nil {
		return
	}
	e.AddString("Addr", x.Addr)
	e.AddString("Token", x.Token)
	if len(x.Meta) > 0 {
		if err = e.AddObject("Meta", zapcore.ObjectMarshalerFunc(func(oe zapcore.ObjectEncoder) error {
			for k, v := range x.Meta {
				oe.AddString(k, v)
			}
			return nil
		})); err != nil {
			return
		}
	}
	return
}
