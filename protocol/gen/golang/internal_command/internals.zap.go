// Code generated by protokitgo. DO NOT EDIT.
package internal_command

import "go.uber.org/zap/zapcore"
import "strconv"

var _ = strconv.IntSize

var ZapLogMarshalCmdCheckup func(zapcore.ObjectEncoder, *CmdCheckup) error

type ZapArrayCmdCheckup []*CmdCheckup

func (x ZapArrayCmdCheckup) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntCmdCheckup map[int]*CmdCheckup

func (x ZapMapIntCmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32CmdCheckup map[int32]*CmdCheckup

func (x ZapMapInt32CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64CmdCheckup map[int64]*CmdCheckup

func (x ZapMapInt64CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringCmdCheckup map[string]*CmdCheckup

func (x ZapMapStringCmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32CmdCheckup map[uint32]*CmdCheckup

func (x ZapMapUint32CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64CmdCheckup map[uint64]*CmdCheckup

func (x ZapMapUint64CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalCmdCheckup != nil {
		return ZapLogMarshalCmdCheckup(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt32("Code", x.Code)
	e.AddString("Message", x.Message)
	e.AddByteString("CustomMeasurements", x.CustomMeasurements)
	return
}
