// Code generated by protokitgo. DO NOT EDIT.
package internal_command

import "go.uber.org/zap/zapcore"
import "strconv"

var _ = strconv.IntSize

var ZapLogMarshalCmdStream func(zapcore.ObjectEncoder, *CmdStream) error

type ZapArrayCmdStream []*CmdStream

func (x ZapArrayCmdStream) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntCmdStream map[int]*CmdStream

func (x ZapMapIntCmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32CmdStream map[int32]*CmdStream

func (x ZapMapInt32CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64CmdStream map[int64]*CmdStream

func (x ZapMapInt64CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringCmdStream map[string]*CmdStream

func (x ZapMapStringCmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32CmdStream map[uint32]*CmdStream

func (x ZapMapUint32CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64CmdStream map[uint64]*CmdStream

func (x ZapMapUint64CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *CmdStream) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalCmdStream != nil {
		return ZapLogMarshalCmdStream(e, x)
	}
	if x == nil {
		return
	}
	e.AddString("Addr", x.Addr)
	e.AddString("Token", x.Token)
	if len(x.Meta) > 0 {
		if err = e.AddObject("Meta", zapcore.ObjectMarshalerFunc(func(oe zapcore.ObjectEncoder) error {
			for k, v := range x.Meta {
				oe.AddString(k, v)
			}
			return nil
		})); err != nil {
			return
		}
	}
	return
}

var ZapLogMarshalCmdPing func(zapcore.ObjectEncoder, *CmdPing) error

type ZapArrayCmdPing []*CmdPing

func (x ZapArrayCmdPing) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntCmdPing map[int]*CmdPing

func (x ZapMapIntCmdPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32CmdPing map[int32]*CmdPing

func (x ZapMapInt32CmdPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64CmdPing map[int64]*CmdPing

func (x ZapMapInt64CmdPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringCmdPing map[string]*CmdPing

func (x ZapMapStringCmdPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32CmdPing map[uint32]*CmdPing

func (x ZapMapUint32CmdPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64CmdPing map[uint64]*CmdPing

func (x ZapMapUint64CmdPing) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *CmdPing) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalCmdPing != nil {
		return ZapLogMarshalCmdPing(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt64("Timestamp", x.Timestamp)
	return
}

var ZapLogMarshalCmdPingAck func(zapcore.ObjectEncoder, *CmdPingAck) error

type ZapArrayCmdPingAck []*CmdPingAck

func (x ZapArrayCmdPingAck) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntCmdPingAck map[int]*CmdPingAck

func (x ZapMapIntCmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32CmdPingAck map[int32]*CmdPingAck

func (x ZapMapInt32CmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64CmdPingAck map[int64]*CmdPingAck

func (x ZapMapInt64CmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringCmdPingAck map[string]*CmdPingAck

func (x ZapMapStringCmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32CmdPingAck map[uint32]*CmdPingAck

func (x ZapMapUint32CmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64CmdPingAck map[uint64]*CmdPingAck

func (x ZapMapUint64CmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *CmdPingAck) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalCmdPingAck != nil {
		return ZapLogMarshalCmdPingAck(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt64("Timestamp", x.Timestamp)
	return
}

var ZapLogMarshalCmdCheckup func(zapcore.ObjectEncoder, *CmdCheckup) error

type ZapArrayCmdCheckup []*CmdCheckup

func (x ZapArrayCmdCheckup) MarshalLogArray(e zapcore.ArrayEncoder) error {
	for _, v := range x {
		if err := e.AppendObject(v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapIntCmdCheckup map[int]*CmdCheckup

func (x ZapMapIntCmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.Itoa(k), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt32CmdCheckup map[int32]*CmdCheckup

func (x ZapMapInt32CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(int64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapInt64CmdCheckup map[int64]*CmdCheckup

func (x ZapMapInt64CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatInt(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapStringCmdCheckup map[string]*CmdCheckup

func (x ZapMapStringCmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(k, v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint32CmdCheckup map[uint32]*CmdCheckup

func (x ZapMapUint32CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(uint64(k), 10), v); err != nil {
			return err
		}
	}
	return nil
}

type ZapMapUint64CmdCheckup map[uint64]*CmdCheckup

func (x ZapMapUint64CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) error {
	for k, v := range x {
		if err := e.AddObject(strconv.FormatUint(k, 10), v); err != nil {
			return err
		}
	}
	return nil
}

func (x *CmdCheckup) MarshalLogObject(e zapcore.ObjectEncoder) (err error) {
	if ZapLogMarshalCmdCheckup != nil {
		return ZapLogMarshalCmdCheckup(e, x)
	}
	if x == nil {
		return
	}
	e.AddInt32("Code", x.Code)
	e.AddString("Message", x.Message)
	e.AddByteString("CustomMeasurements", x.CustomMeasurements)
	return
}
