// Code generated by ProtoKitGo. DO NOT EDIT.
// package: netutils
// file: netutils/cmds.proto

import * as jspb from "google-protobuf";
// Code generated by protokitgo. DO NOT EDIT.
export class CmdPing extends jspb.Message {
	getTimestamp(): number;
  	setTimestamp(value: number): void;

	serializeBinary(): Uint8Array;
  	toObject(includeInstance?: boolean): CmdPing.AsObject;
  	static toObject(includeInstance: boolean, msg: CmdPing): CmdPing.AsObject;
  	static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  	static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  	static serializeBinaryToWriter(message: CmdPing, writer: jspb.BinaryWriter): void;
  	static deserializeBinary(bytes: Uint8Array): CmdPing;
  	static deserializeBinaryFromReader(message: CmdPing, reader: jspb.BinaryReader): CmdPing;
}

export namespace CmdPing {
  	export type AsObject = {
    	timestamp: number,
   	}
}
// Code generated by protokitgo. DO NOT EDIT.
export class CmdPingAck extends jspb.Message {
	getTimestamp(): number;
  	setTimestamp(value: number): void;

	serializeBinary(): Uint8Array;
  	toObject(includeInstance?: boolean): CmdPingAck.AsObject;
  	static toObject(includeInstance: boolean, msg: CmdPingAck): CmdPingAck.AsObject;
  	static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  	static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  	static serializeBinaryToWriter(message: CmdPingAck, writer: jspb.BinaryWriter): void;
  	static deserializeBinary(bytes: Uint8Array): CmdPingAck;
  	static deserializeBinaryFromReader(message: CmdPingAck, reader: jspb.BinaryReader): CmdPingAck;
}

export namespace CmdPingAck {
  	export type AsObject = {
    	timestamp: number,
   	}
}
// Code generated by protokitgo. DO NOT EDIT.
export class CmdCheckup extends jspb.Message {
	getCode(): number;
  	setCode(value: number): void;

	getMessage(): string;
  	setMessage(value: string): void;

	getCustommeasurements(): string;
  	setCustommeasurements(value: string): void;

	serializeBinary(): Uint8Array;
  	toObject(includeInstance?: boolean): CmdCheckup.AsObject;
  	static toObject(includeInstance: boolean, msg: CmdCheckup): CmdCheckup.AsObject;
  	static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  	static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  	static serializeBinaryToWriter(message: CmdCheckup, writer: jspb.BinaryWriter): void;
  	static deserializeBinary(bytes: Uint8Array): CmdCheckup;
  	static deserializeBinaryFromReader(message: CmdCheckup, reader: jspb.BinaryReader): CmdCheckup;
}

export namespace CmdCheckup {
  	export type AsObject = {
    	code: number,
    	message: string,
    	custommeasurements: string,
   	}
}

